digraph G {
    rankdir=TB;
    node [
        style=filled,
        fillcolor=lightcyan,
        fontname="Helvetica",
    ];

    edge [
        fontname="Helvetica",
        penwidth=2,
        arrowsize=1,
    ];
    
    node_1 [label="Define and issue credentials with mandatory and optional components"];
    node_2 [label="Constructing Merkle Tree"];
    node_3 [label="Publishing Data as a Smart Contract"];
    node_4 [label="Generate Receipts"];
    node_5 [label="Exchange Credentials"];
    node_6 [label="Revoke Credentials"];
    node_7 [label="Check the receipt information and issuerâ€™s information"];
    node_8 [label="Check the integrity of all components of the credential"];
    node_9 [label="Check the validity of the components in the certificate"];
    node_10 [label="Check whether the certificate is revoked"];
    node_1 -> node_2 [label="Define credential schema"];
    node_2 -> node_3 [label="Combine fingerprint and content (Step 3 uses the combined result from Step 2)"];
    node_3 -> node_4 [label="Root node hash stored"];
    node_4 -> node_5 [label="Receipts sent to learners (Step 5 uses the stored information from Step 4)"];
    node_5 -> node_6 [label="Selected components presented (Proceeding after sending receipts)"];
    node_6 -> node_7 [label="Revoked credentials listed"];
    node_7 -> node_8 [label="Smart contract manages validity"];
    node_8 -> node_9 [label="Ensuring integrity (Proceeding after managing validity)"];
    node_9 -> node_10 [label="Final step (Proceeding after ensuring integrity)"];
}