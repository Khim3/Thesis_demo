digraph G {
    compound=true;
    rankdir=TB;

    subgraph cluster_1 { label="Define and issue credentials with mandatory and optional components";        actor_1_1 [label="Issuer"];    entity_1_1 [label="Credential"];    entity_1_2 [label="Mandatory Component"];    entity_1_3 [label="Optional Components"];    entity_1_4 [label="IU-SmartCert"];    actor_1_1 -> entity_1_1 [label="Define and issue credentials with mandatory and optional components"];    actor_1_1 -> entity_1_2 [label="Organize each credential to include a mandatory component for disclosure"];    actor_1_1 -> entity_1_3 [label="Define flexible data models allowing selective disclosure by learners"];    actor_1_1 -> entity_1_4 [label="Input the fingerprint of all credentials into IU-SmartCert system"]; }
subgraph cluster_2 { label="Constructing Merkle Tree";        actor_2_1 [label="You"];    entity_2_1 [label="Credential identity"];    entity_2_2 [label="Component content"];    entity_2_3 [label="Component type"];    entity_2_4 [label="SHA-256"];    entity_2_5 [label="Leaf nodes"];    entity_2_6 [label="Merkle tree"];    entity_2_7 [label="Parent nodes"];    entity_2_8 [label="Root node"];    entity_2_9 [label="Schema"];    actor_2_1 -> entity_2_1 [label="Combine with component content and type"];    actor_2_1 -> entity_2_2 [label="Combine with credential identity and type"];    actor_2_1 -> entity_2_3 [label="Define as part of schema, combine with credential identity and component content"];    entity_2_9 -> entity_2_3 [label="Defines whether a component is mandatory or optional"];    actor_2_1 -> entity_2_4 [label="Use to calculate hash value of combination for leaf node creation"];    entity_2_5 -> entity_2_6 [label="Form the base layer by combining credential identity, component content, and type through hashing"];    entity_2_7 -> entity_2_6 [label="Built by concatenating leaf nodes and calculating new hash values"];    entity_2_8 -> entity_2_6 [label="Represents the final result of building the tree, ensuring all data is verified"]; }
subgraph cluster_3 { label="Publishing Data as a Smart Contract";        actor_3_1 [label="IU-SmartCert system"];    entity_3_1 [label="Merkle tree"];    entity_3_2 [label="Hash value of the root node"];    entity_3_3 [label="Supporting data"];    entity_3_4 [label="Smart contract"];    entity_3_5 [label="Issuer's name hash (read-only variable)"];    entity_3_6 [label="MTRoot (hash of the Merkle tree root)"];    entity_3_7 [label="RevocationList"];    actor_3_1 -> entity_3_1 [label="Constructs"];    actor_3_1 -> entity_3_2 [label="Publishes"];    actor_3_1 -> entity_3_3 [label="Includes in smart contract"];    actor_3_1 -> entity_3_4 [label="Publishes on Ethereum blockchain"];    entity_3_4 -> entity_3_5 [label="Contains"];    entity_3_4 -> entity_3_6 [label="Stores"];    entity_3_4 -> entity_3_7 [label="Includes"]; }
subgraph cluster_4 { label="Generate Receipts";  actor_4_1 [label="System"];  entity_4_1 [label="Credential"];  entity_4_10 [label="Learner"];  entity_4_11 [label="Receipt"];  entity_4_10 [label="Metadata"];  entity_4_11 [label="Proof of Existence in Merkle Tree"];  entity_4_10 [label="X.509 Certificate Of Issuer"];  entity_4_11 [label="Trusted CA"];  entity_4_10 [label="Smart Contract"];  entity_4_11 [label="Ethereum Network"];  entity_4_10 [label="Receipt Format"];  entity_4_11 [label="Relying Party"];  actor_4_1 -> entity_4_1 [label="Generates Receipts"];  actor_4_1 -> entity_4_10 [label="Sends Receipts"];  entity_4_11 -> entity_4_10 [label="Contains Metadata"];  entity_4_11 -> entity_4_11 [label="Includes Proof"];  entity_4_10 -> entity_4_11 [label="Authenticated By"];  entity_4_11 -> entity_4_10 [label="Contains Certificate"];  entity_4_10 -> entity_4_11 [label="Deployed On"];  actor_4_1 -> entity_4_10 [label="Generates In JSON"];  entity_4_10 -> entity_4_11 [label="Presents Credential"]; }
subgraph cluster_5 { label="Exchange Credentials";        actor_5_1 [label="Learners"];    entity_5_1 [label="Credential"];    entity_5_2 [label="Mandatory Component"];    entity_5_3 [label="Optional Components"];    entity_5_4 [label="Issuers"];    entity_5_5 [label="Employers (Relying Parties)"];    entity_5_6 [label="IU-SmartCert System"];    entity_5_7 [label="Receipt"];    actor_5_1 -> entity_5_1 [label="Exchanging credentials with a selective disclosure option"];    actor_5_1 -> entity_5_2 [label="Selective Disclosure Option"];    actor_5_1 -> entity_5_3 [label="Selection for Disclosure"];    actor_5_1 -> entity_5_4 [label="Following Predefined Schema"];    actor_5_1 -> entity_5_5 [label="Presentation of Selected Components"];    actor_5_1 -> entity_5_6 [label="Generating New Receipts"];    actor_5_1 -> entity_5_7 [label="Update or Generation"]; }
subgraph cluster_6 { label="Revoke Credentials";        actor_6_1 [label="Issuer"];    entity_6_1 [label="Mandatory Component"];    entity_6_2 [label="Revocation List"];    entity_6_3 [label="Smart Contract"];    actor_6_1 -> entity_6_1 [label="Mark as Revoked"];    actor_6_1 -> entity_6_2 [label="Add Record"];    actor_6_1 -> entity_6_3 [label="Manage Revocations"]; }
subgraph cluster_7 { label="Check the receipt information and issuerâ€™s information";        actor_7_1 [label="Relying Party (Employer)"];    entity_7_1 [label="Issuer's X.509 Certificate"];    entity_7_2 [label="Signature of Ethereum Account"];    entity_7_3 [label="Owner of Smart Contract on Ethereum"];    entity_7_4 [label="Name of Issuer in Smart Contract"];    entity_7_5 [label="Name on X.509 Certificate"];    actor_7_1 -> entity_7_1 [label="Check"];    actor_7_1 -> entity_7_2 [label="Verify"];    actor_7_1 -> entity_7_3 [label="Confirm Validity"];    actor_7_1 -> entity_7_4 [label="Match"];    actor_7_1 -> entity_7_5 [label="Verify Consistency"]; }
subgraph cluster_8 { label="Check the integrity of all components of the credential";    actor_8_1 [label="Relying party"];  entity_8_1 [label="Components of the credential"];  entity_8_2 [label="Receipt"];  entity_8_3 [label="Number, type, and hash value of files"];  actor_8_1 -> entity_8_1 [label="Checking integrity"];  actor_8_1 -> entity_8_2 [label="Referencing for verification"];  actor_8_1 -> entity_8_3 [label="Validating against receipt information"]; }
subgraph cluster_9 { label="Check the validity of the components in the certificate";        actor_9_1 [label="Relying Party"];    entity_9_1 [label="Credential Components"];    entity_9_2 [label="Hash Values"];    entity_9_3 [label="Proofs of Existence"];    entity_9_4 [label="Merkle Tree"];    entity_9_5 [label="Root Node"];    entity_9_6 [label="Ethereum Blockchain"];    actor_9_1 -> entity_9_1 [label="Verifies"];    actor_9_1 -> entity_9_2 [label="Checks"];    actor_9_1 -> entity_9_3 [label="Validates"];    entity_9_1 -> entity_9_4 [label="Part of"];    entity_9_4 -> entity_9_6 [label="Published as Smart Contract"];    entity_9_5 -> entity_9_6 [label="Stored on"]; }
subgraph cluster_10 { label="Check whether the certificate is revoked";        actor_10_1 [label="Relying party (or employer)"];    entity_10_1 [label="Mandatory component of the credential"];    entity_10_2 [label="List of revoked credentials"];    entity_10_3 [label="Smart contract on Ethereum blockchain"];    actor_10_1 -> entity_10_1 [label="Check Revocation"];    actor_10_1 -> entity_10_2 [label="Verify Against Revocation List"];    actor_10_1 -> entity_10_3 [label="Access and Check for Revocation Status"]; }

    actor_1_1 -> actor_2_1 [label="Define credential schema", ltail=cluster_1, lhead=cluster_2];
actor_2_1 -> actor_3_1 [label="Combine fingerprint and content (Step 3 uses the combined result from Step 2)", ltail=cluster_2, lhead=cluster_3];
actor_3_1 -> actor_4_1 [label="Root node hash stored", ltail=cluster_3, lhead=cluster_4];
actor_4_1 -> actor_5_1 [label="Receipts sent to learners (Step 5 uses the stored information from Step 4)", ltail=cluster_4, lhead=cluster_5];
actor_5_1 -> actor_6_1 [label="Selected components presented (Proceeding after sending receipts)", ltail=cluster_5, lhead=cluster_6];
actor_6_1 -> actor_7_1 [label="Revoked credentials listed", ltail=cluster_6, lhead=cluster_7];
actor_7_1 -> actor_8_1 [label="Smart contract manages validity", ltail=cluster_7, lhead=cluster_8];
actor_8_1 -> actor_9_1 [label="Ensuring integrity (Proceeding after managing validity)", ltail=cluster_8, lhead=cluster_9];
actor_9_1 -> actor_10_1 [label="Final step (Proceeding after ensuring integrity)", ltail=cluster_9, lhead=cluster_10];
}

